{"ast":null,"code":"import { useRef } from 'react';\nimport { useSharedValue } from \"./useSharedValue\";\nimport { getTag } from \"../NativeMethods\";\nimport { getShadowNodeWrapperFromHostInstance } from \"../fabricUtils\";\nimport { makeShareableCloneRecursive, registerShareableMapping } from \"../shareables\";\n\nfunction getShareableShadowNodeFromComponent(component) {\n  return getShadowNodeWrapperFromHostInstance(component);\n}\n\nfunction getComponentOrScrollableRef(component) {\n  if (global._IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!global._IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n\n  return component;\n}\n\nvar getTagValueFunction = global._IS_FABRIC ? getShareableShadowNodeFromComponent : getTag;\nvar _worklet_13022177922424_init_data = {\n  code: \"function anonymous() {\\n  const {\\n    tag\\n  } = this._closure;\\n  return function () {\\n    return tag.value;\\n  };\\n}\",\n  location: \"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedRef.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"tag\\\",\\\"_closure\\\",\\\"value\\\"],\\\"sources\\\":[\\\"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedRef.js\\\"],\\\"mappings\\\":\\\"AA+Bc,SAAAA,SAAMA,CAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGZ,OAAO;IAAA,OAAMD,GAAG,CAACE,KAAK;EAAA;AACxB\\\"}\"\n};\nexport function useAnimatedRef() {\n  var tag = useSharedValue(-1);\n  var ref = useRef();\n\n  if (!ref.current) {\n    var fun = function fun(component) {\n      if (component) {\n        tag.value = getTagValueFunction(getComponentOrScrollableRef(component));\n        fun.current = component;\n      }\n\n      return tag.value;\n    };\n\n    fun.current = null;\n    var remoteRef = makeShareableCloneRecursive({\n      __init: function () {\n        var _e = [new global.Error(), -2, -27];\n\n        var _f = function _f() {\n          return function () {\n            return tag.value;\n          };\n        };\n\n        _f._closure = {\n          tag: tag\n        };\n        _f.__initData = _worklet_13022177922424_init_data;\n        _f.__workletHash = 13022177922424;\n        _f.__stackDetails = _e;\n        _f.__version = \"3.3.0\";\n        return _f;\n      }()\n    });\n    registerShareableMapping(fun, remoteRef);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}","map":{"version":3,"sources":["useAnimatedRef.ts"],"names":["useRef","useSharedValue","getTag","getShadowNodeWrapperFromHostInstance","makeShareableCloneRecursive","registerShareableMapping","getShareableShadowNodeFromComponent","component","getComponentOrScrollableRef","global","_IS_FABRIC","getNativeScrollRef","getScrollableNode","getTagValueFunction","useAnimatedRef","tag","ref","current","fun","value","remoteRef","__init"],"mappings":"AAAA,SAAoBA,MAApB,QAAkC,OAAlC;AACA,SAASC,cAAT;AAGA,SAASC,MAAT;AACA,SAASC,oCAAT;AACA,SACEC,2BADF,EAEEC,wBAFF;;AAUA,SAASC,mCAAT,CACEC,SADF,EAEqB;EACnB,OAAOJ,oCAAoC,CAACI,SAAD,CAA3C;AACF;;AAEA,SAASC,2BAAT,CAAqCD,SAArC,EAA4E;EAC1E,IAAIE,MAAM,CAACC,UAAPD,IAAqBF,SAAS,CAACI,kBAAnC,EAAuD;IACrD,OAAOJ,SAAS,CAACI,kBAAVJ,EAAP;EACD,CAFD,MAEO,IAAI,CAACE,MAAM,CAACC,UAAR,IAAsBH,SAAS,CAACK,iBAApC,EAAuD;IAC5D,OAAOL,SAAS,CAACK,iBAAVL,EAAP;EACF;;EACA,OAAOA,SAAP;AACF;;AAEA,IAAMM,mBAAmB,GAAGJ,MAAM,CAACC,UAAPD,GACxBH,mCADwBG,GAExBP,MAFJ;;;;;;AAIA,OAAO,SAASY,cAAT,GAAwE;EAC7E,IAAMC,GAAG,GAAGd,cAAc,CAAoC,CAAC,CAArC,CAA1B;EACA,IAAMe,GAAG,GAAGhB,MAAM,EAAlB;;EAEA,IAAI,CAACgB,GAAG,CAACC,OAAT,EAAkB;IAChB,IAAMC,GAAyB,GAA2BX,SAApDW,GAAoDX,CAAAA,SAAS,EAAK;MAEtE,IAAIA,SAAJ,EAAe;QACbQ,GAAG,CAACI,KAAJJ,GAAYF,mBAAmB,CAACL,2BAA2B,CAACD,SAAD,CAA5B,CAA/BQ;QACAG,GAAG,CAACD,OAAJC,GAAcX,SAAdW;MACF;;MACA,OAAOH,GAAG,CAACI,KAAX;IACA,CAPF;;IASAD,GAAG,CAACD,OAAJC,GAAc,IAAdA;IAEA,IAAME,SAAS,GAAGhB,2BAA2B,CAAC;MAC5CiB,MAAM;QAAA;;QAAA,uBAAQ;UAEZ,OAAO;YAAA,OAAMN,GAAG,CAACI,KAAV;UAAA,CAAP;QACF,CAHM;;QAAA;UAAA,KAnDHlB;QAmDG;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA;IADsC,CAAD,CAA7C;IAMAI,wBAAwB,CAACa,GAAD,EAAME,SAAN,CAAxBf;IACAW,GAAG,CAACC,OAAJD,GAAcE,GAAdF;EACF;;EAEA,OAAOA,GAAG,CAACC,OAAX;AACF","sourcesContent":["import { Component, useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport { RefObjectFunction } from './commonTypes';\nimport { ShadowNodeWrapper } from '../commonTypes';\nimport { getTag } from '../NativeMethods';\nimport { getShadowNodeWrapperFromHostInstance } from '../fabricUtils';\nimport {\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from '../shareables';\n\ninterface ComponentRef extends Component {\n  getNativeScrollRef?: () => ComponentRef;\n  getScrollableNode?: () => ComponentRef;\n}\n\nfunction getShareableShadowNodeFromComponent(\n  component: ComponentRef\n): ShadowNodeWrapper {\n  return getShadowNodeWrapperFromHostInstance(component);\n}\n\nfunction getComponentOrScrollableRef(component: ComponentRef): ComponentRef {\n  if (global._IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!global._IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\n\nconst getTagValueFunction = global._IS_FABRIC\n  ? getShareableShadowNodeFromComponent\n  : getTag;\n\nexport function useAnimatedRef<T extends ComponentRef>(): RefObjectFunction<T> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const ref = useRef<RefObjectFunction<T>>();\n\n  if (!ref.current) {\n    const fun: RefObjectFunction<T> = <RefObjectFunction<T>>((component) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        tag.value = getTagValueFunction(getComponentOrScrollableRef(component));\n        fun.current = component;\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const remoteRef = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        return () => tag.value;\n      },\n    });\n    registerShareableMapping(fun, remoteRef);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}