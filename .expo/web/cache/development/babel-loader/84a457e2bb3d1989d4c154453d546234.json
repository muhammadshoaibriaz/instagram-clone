{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { makeMutable, subscribeForKeyboardEvents, unsubscribeFromKeyboardEvents } from \"../core\";\nimport { KeyboardState } from \"../commonTypes\";\nvar _worklet_9450373085927_init_data = {\n  code: \"function anonymous(state, height) {\\n  const {\\n    keyboardEventData\\n  } = this._closure;\\n  keyboardEventData.state.value = state;\\n  keyboardEventData.height.value = height;\\n}\",\n  location: \"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedKeyboard.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"state\\\",\\\"height\\\",\\\"keyboardEventData\\\",\\\"_closure\\\",\\\"value\\\"],\\\"sources\\\":[\\\"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedKeyboard.js\\\"],\\\"mappings\\\":\\\"AAeoD,SAACA,SAAOA,CAAAC,KAAM,EAAKC,MAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGjED,iBAAiB,CAACF,KAAK,CAACI,KAAK,GAAGJ,KAAK;EACrCE,iBAAiB,CAACD,MAAM,CAACG,KAAK,GAAGH,MAAM;AACzC\\\"}\"\n};\nvar _worklet_12834194913720_init_data = {\n  code: \"function anonymous(state, height) {\\n  const {\\n    _keyboardEventData\\n  } = this._closure;\\n  _keyboardEventData.state.value = state;\\n  _keyboardEventData.height.value = height;\\n}\",\n  location: \"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedKeyboard.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"state\\\",\\\"height\\\",\\\"_keyboardEventData\\\",\\\"_closure\\\",\\\"value\\\"],\\\"sources\\\":[\\\"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useAnimatedKeyboard.js\\\"],\\\"mappings\\\":\\\"AA4BsD,SAACA,SAAOA,CAAAC,KAAM,EAAKC,MAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAGjED,kBAAiB,CAACF,KAAK,CAACI,KAAK,GAAGJ,KAAK;EACrCE,kBAAiB,CAACD,MAAM,CAACG,KAAK,GAAGH,MAAM;AACzC\\\"}\"\n};\nexport function useAnimatedKeyboard() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isStatusBarTranslucentAndroid: false\n  };\n  var ref = useRef(null);\n  var listenerId = useRef(-1);\n  var isSubscribed = useRef(false);\n\n  if (ref.current === null) {\n    var keyboardEventData = {\n      state: makeMutable(KeyboardState.UNKNOWN),\n      height: makeMutable(0)\n    };\n    listenerId.current = subscribeForKeyboardEvents(function () {\n      var _e = [new global.Error(), -2, -27];\n\n      var _f = function _f(state, height) {\n        keyboardEventData.state.value = state;\n        keyboardEventData.height.value = height;\n      };\n\n      _f._closure = {\n        keyboardEventData: keyboardEventData\n      };\n      _f.__initData = _worklet_9450373085927_init_data;\n      _f.__workletHash = 9450373085927;\n      _f.__stackDetails = _e;\n      _f.__version = \"3.3.0\";\n      return _f;\n    }(), options);\n    ref.current = keyboardEventData;\n    isSubscribed.current = true;\n  }\n\n  useEffect(function () {\n    if (isSubscribed.current === false && ref.current !== null) {\n      var _keyboardEventData = ref.current;\n      listenerId.current = subscribeForKeyboardEvents(function () {\n        var _e = [new global.Error(), -2, -27];\n\n        var _f = function _f(state, height) {\n          _keyboardEventData.state.value = state;\n          _keyboardEventData.height.value = height;\n        };\n\n        _f._closure = {\n          _keyboardEventData: _keyboardEventData\n        };\n        _f.__initData = _worklet_12834194913720_init_data;\n        _f.__workletHash = 12834194913720;\n        _f.__stackDetails = _e;\n        _f.__version = \"3.3.0\";\n        return _f;\n      }(), options);\n      isSubscribed.current = true;\n    }\n\n    return function () {\n      unsubscribeFromKeyboardEvents(listenerId.current);\n      isSubscribed.current = false;\n    };\n  }, []);\n  return ref.current;\n}","map":{"version":3,"sources":["useAnimatedKeyboard.ts"],"names":["useEffect","useRef","makeMutable","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","KeyboardState","useAnimatedKeyboard","options","isStatusBarTranslucentAndroid","ref","listenerId","isSubscribed","current","keyboardEventData","state","UNKNOWN","height","value"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SACEC,WADF,EAEEC,0BAFF,EAGEC,6BAHF;AAKA,SAGEC,aAHF;;;;;;;;;;;AAMA,OAAO,SAASC,mBAAT,GAEiB;EAAA,IADtBC,OAAgC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAG;IAAEC,6BAA6B,EAAE;EAAjC,CACb;EACtB,IAAMC,GAAG,GAAGR,MAAM,CAA8B,IAA9B,CAAlB;EACA,IAAMS,UAAU,GAAGT,MAAM,CAAS,CAAC,CAAV,CAAzB;EACA,IAAMU,YAAY,GAAGV,MAAM,CAAU,KAAV,CAA3B;;EAEA,IAAIQ,GAAG,CAACG,OAAJH,KAAgB,IAApB,EAA0B;IACxB,IAAMI,iBAAuC,GAAG;MAC9CC,KAAK,EAAEZ,WAAW,CAAgBG,aAAa,CAACU,OAA9B,CAD4B;MAE9CC,MAAM,EAAEd,WAAW,CAAC,CAAD;IAF2B,CAAhD;IAIAQ,UAAU,CAACE,OAAXF,GAAqBP,0BAA0B;MAAA;;MAAA,qBAAEW,KAAF,EAASE,MAAT,EAAoB;QAEjEH,iBAAiB,CAACC,KAAlBD,CAAwBI,KAAxBJ,GAAgCC,KAAhCD;QACAA,iBAAiB,CAACG,MAAlBH,CAAyBI,KAAzBJ,GAAiCG,MAAjCH;MACD,CAJ8C;;MAAA;QAAA,mBAlBnD;MAkBmD;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA,KAI5CN,OAJ4C,CAA/CG;IAKAD,GAAG,CAACG,OAAJH,GAAcI,iBAAdJ;IACAE,YAAY,CAACC,OAAbD,GAAuB,IAAvBA;EACF;;EACAX,SAAS,CAAC,YAAM;IACd,IAAIW,YAAY,CAACC,OAAbD,KAAyB,KAAzBA,IAAkCF,GAAG,CAACG,OAAJH,KAAgB,IAAtD,EAA4D;MAC1D,IAAMI,kBAAiB,GAAGJ,GAAG,CAACG,OAA9B;MAEAF,UAAU,CAACE,OAAXF,GAAqBP,0BAA0B;QAAA;;QAAA,qBAAEW,KAAF,EAASE,MAAT,EAAoB;UAEjEH,kBAAiB,CAACC,KAAlBD,CAAwBI,KAAxBJ,GAAgCC,KAAhCD;UACAA,kBAAiB,CAACG,MAAlBH,CAAyBI,KAAzBJ,GAAiCG,MAAjCH;QACD,CAJ8C;;QAAA;UAAA,oBA9BrD;QA8BqD;QAAA;QAAA;QAAA;QAAA;QAAA;MAAA,KAI5CN,OAJ4C,CAA/CG;MAKAC,YAAY,CAACC,OAAbD,GAAuB,IAAvBA;IACF;;IACA,OAAO,YAAM;MACXP,6BAA6B,CAACM,UAAU,CAACE,OAAZ,CAA7BR;MACAO,YAAY,CAACC,OAAbD,GAAuB,KAAvBA;IACD,CAHD;EAID,CAfQ,EAeN,EAfM,CAATX;EAgBA,OAAOS,GAAG,CAACG,OAAX;AACF","sourcesContent":["import { useEffect, useRef } from 'react';\nimport {\n  makeMutable,\n  subscribeForKeyboardEvents,\n  unsubscribeFromKeyboardEvents,\n} from '../core';\nimport {\n  AnimatedKeyboardInfo,\n  AnimatedKeyboardOptions,\n  KeyboardState,\n} from '../commonTypes';\n\nexport function useAnimatedKeyboard(\n  options: AnimatedKeyboardOptions = { isStatusBarTranslucentAndroid: false }\n): AnimatedKeyboardInfo {\n  const ref = useRef<AnimatedKeyboardInfo | null>(null);\n  const listenerId = useRef<number>(-1);\n  const isSubscribed = useRef<boolean>(false);\n\n  if (ref.current === null) {\n    const keyboardEventData: AnimatedKeyboardInfo = {\n      state: makeMutable<KeyboardState>(KeyboardState.UNKNOWN),\n      height: makeMutable(0),\n    };\n    listenerId.current = subscribeForKeyboardEvents((state, height) => {\n      'worklet';\n      keyboardEventData.state.value = state;\n      keyboardEventData.height.value = height;\n    }, options);\n    ref.current = keyboardEventData;\n    isSubscribed.current = true;\n  }\n  useEffect(() => {\n    if (isSubscribed.current === false && ref.current !== null) {\n      const keyboardEventData = ref.current;\n      // subscribe again after Fast Refresh\n      listenerId.current = subscribeForKeyboardEvents((state, height) => {\n        'worklet';\n        keyboardEventData.state.value = state;\n        keyboardEventData.height.value = height;\n      }, options);\n      isSubscribed.current = true;\n    }\n    return () => {\n      unsubscribeFromKeyboardEvents(listenerId.current);\n      isSubscribed.current = false;\n    };\n  }, []);\n  return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}