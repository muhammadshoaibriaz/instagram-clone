{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nimport NativeReanimatedModule from \"./NativeReanimated\";\nimport { registerEventHandler, unregisterEventHandler } from \"./core\";\n\nfunction jsListener(eventName, handler) {\n  return function (evt) {\n    handler(_objectSpread(_objectSpread({}, evt.nativeEvent), {}, {\n      eventName: eventName\n    }));\n  };\n}\n\nvar WorkletEventHandler = function () {\n  function WorkletEventHandler(worklet) {\n    _classCallCheck(this, WorkletEventHandler);\n\n    var eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _defineProperty(this, \"worklet\", void 0);\n\n    _defineProperty(this, \"eventNames\", void 0);\n\n    _defineProperty(this, \"reattachNeeded\", void 0);\n\n    _defineProperty(this, \"listeners\", void 0);\n\n    _defineProperty(this, \"viewTag\", void 0);\n\n    _defineProperty(this, \"registrations\", void 0);\n\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.reattachNeeded = false;\n    this.listeners = {};\n    this.viewTag = undefined;\n    this.registrations = [];\n\n    if (!NativeReanimatedModule.native) {\n      this.listeners = eventNames.reduce(function (acc, eventName) {\n        acc[eventName] = jsListener(eventName, worklet);\n        return acc;\n      }, {});\n    }\n  }\n\n  _createClass(WorkletEventHandler, [{\n    key: \"updateWorklet\",\n    value: function updateWorklet(newWorklet) {\n      this.worklet = newWorklet;\n      this.reattachNeeded = true;\n    }\n  }, {\n    key: \"registerForEvents\",\n    value: function registerForEvents(viewTag, fallbackEventName) {\n      var _this = this;\n\n      this.viewTag = viewTag;\n      this.registrations = this.eventNames.map(function (eventName) {\n        return registerEventHandler(viewTag + eventName, _this.worklet);\n      });\n\n      if (this.registrations.length === 0 && fallbackEventName) {\n        this.registrations.push(registerEventHandler(viewTag + fallbackEventName, this.worklet));\n      }\n    }\n  }, {\n    key: \"unregisterFromEvents\",\n    value: function unregisterFromEvents() {\n      this.registrations.forEach(function (id) {\n        return unregisterEventHandler(id);\n      });\n      this.registrations = [];\n    }\n  }]);\n\n  return WorkletEventHandler;\n}();\n\nexport { WorkletEventHandler as default };","map":{"version":3,"sources":["WorkletEventHandler.ts"],"names":["NativeReanimatedModule","registerEventHandler","unregisterEventHandler","jsListener","eventName","handler","evt","nativeEvent","WorkletEventHandler","constructor","worklet","eventNames","_defineProperty","reattachNeeded","listeners","viewTag","undefined","registrations","native","reduce","acc","updateWorklet","newWorklet","registerForEvents","fallbackEventName","map","length","push","unregisterFromEvents","forEach","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAOA,sBAAP;AACA,SAASC,oBAAT,EAA+BC,sBAA/B;;AAEA,SAASC,UAAT,CACEC,SADF,EAEEC,OAFF,EAGE;EACA,OAAQC,UAAAA,GAAM,EAAK;IACjBD,OAAO,iCAAMC,GAAG,CAACC,WAAV;MAAuBH,SAAAA,EAAAA;IAAvB,GAAPC;EACD,CAFD;AAGF;;IAEqBG,mB;EAOnBC,6BAAYC,OAAZD,EAAoE;IAAA;;IAAA,IAA3BE,UAAoB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAG,EAAI;;IAAFC,eAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,gBAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,eAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAChE,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKE,cAAL,GAAsB,KAAtB;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,OAAL,GAAeC,SAAf;IACA,KAAKC,aAAL,GAAqB,EAArB;;IAEA,IAAI,CAACjB,sBAAsB,CAACkB,MAA5B,EAAoC;MAClC,KAAKJ,SAAL,GAAiBH,UAAU,CAACQ,MAAXR,CACf,UAACS,GAAD,EAA0ChB,SAA1C,EAAgE;QAC9DgB,GAAG,CAAChB,SAAD,CAAHgB,GAAiBjB,UAAU,CAACC,SAAD,EAAYM,OAAZ,CAA3BU;QACA,OAAOA,GAAP;MACD,CAJcT,EAKf,EALeA,CAAjB;IAOF;EACF;;;;WAEAU,uBAAcC,UAAdD,EAAoD;MAClD,KAAKX,OAAL,GAAeY,UAAf;MACA,KAAKT,cAAL,GAAsB,IAAtB;IACF;;;WAEAU,2BAAkBR,OAAlBQ,EAAmCC,iBAAnCD,EAAqE;MAAA;;MACnE,KAAKR,OAAL,GAAeA,OAAf;MACA,KAAKE,aAAL,GAAqB,KAAKN,UAAL,CAAgBc,GAAhB,CAAqBrB,UAAAA,SAAS;QAAA,OACjDH,oBAAoB,CAACc,OAAO,GAAGX,SAAX,EAAsB,KAAI,CAACM,OAA3B,CAD6B;MAAA,CAA9B,CAArB;;MAGA,IAAI,KAAKO,aAAL,CAAmBS,MAAnB,KAA8B,CAA9B,IAAmCF,iBAAvC,EAA0D;QACxD,KAAKP,aAAL,CAAmBU,IAAnB,CACE1B,oBAAoB,CAACc,OAAO,GAAGS,iBAAX,EAA8B,KAAKd,OAAnC,CADtB;MAGF;IACF;;;WAEAkB,gCAA6B;MAC3B,KAAKX,aAAL,CAAmBY,OAAnB,CAA4BC,UAAAA,EAAE;QAAA,OAAK5B,sBAAsB,CAAC4B,EAAD,CAA3B;MAAA,CAA9B;MACA,KAAKb,aAAL,GAAqB,EAArB;IACF;;;;;;SA9CmBT,mB","sourcesContent":["import { NativeEvent } from './commonTypes';\nimport NativeReanimatedModule from './NativeReanimated';\nimport { registerEventHandler, unregisterEventHandler } from './core';\n\nfunction jsListener<T extends NativeEvent<T>>(\n  eventName: string,\n  handler: (event: T) => void\n) {\n  return (evt: T) => {\n    handler({ ...evt.nativeEvent, eventName });\n  };\n}\n\nexport default class WorkletEventHandler<T extends NativeEvent<T>> {\n  worklet: (event: T) => void;\n  eventNames: string[];\n  reattachNeeded: boolean;\n  listeners: Record<string, (event: T) => void>;\n  viewTag: number | undefined;\n  registrations: string[];\n  constructor(worklet: (event: T) => void, eventNames: string[] = []) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.reattachNeeded = false;\n    this.listeners = {};\n    this.viewTag = undefined;\n    this.registrations = [];\n\n    if (!NativeReanimatedModule.native) {\n      this.listeners = eventNames.reduce(\n        (acc: Record<string, (event: T) => void>, eventName: string) => {\n          acc[eventName] = jsListener(eventName, worklet);\n          return acc;\n        },\n        {}\n      );\n    }\n  }\n\n  updateWorklet(newWorklet: (event: T) => void): void {\n    this.worklet = newWorklet;\n    this.reattachNeeded = true;\n  }\n\n  registerForEvents(viewTag: number, fallbackEventName?: string): void {\n    this.viewTag = viewTag;\n    this.registrations = this.eventNames.map((eventName) =>\n      registerEventHandler(viewTag + eventName, this.worklet)\n    );\n    if (this.registrations.length === 0 && fallbackEventName) {\n      this.registrations.push(\n        registerEventHandler(viewTag + fallbackEventName, this.worklet)\n      );\n    }\n  }\n\n  unregisterFromEvents(): void {\n    this.registrations.forEach((id) => unregisterEventHandler(id));\n    this.registrations = [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}