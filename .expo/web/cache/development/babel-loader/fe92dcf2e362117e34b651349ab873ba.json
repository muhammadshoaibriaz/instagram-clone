{"ast":null,"code":"import { append, appendTransform, identity, reset, toArray } from \"../Matrix2D\";\nimport { parse } from \"./transform\";\n\nfunction appendTransformProps(props) {\n  var x = props.x,\n      y = props.y,\n      originX = props.originX,\n      originY = props.originY,\n      scaleX = props.scaleX,\n      scaleY = props.scaleY,\n      rotation = props.rotation,\n      skewX = props.skewX,\n      skewY = props.skewY;\n  appendTransform(x + originX, y + originY, scaleX, scaleY, rotation, skewX, skewY, originX, originY);\n}\n\nfunction universal2axis(universal, axisX, axisY, defaultValue) {\n  var x;\n  var y;\n\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    var coords = universal.split(/\\s*,\\s*/);\n\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n\n  axisX = +axisX;\n\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n\n  axisY = +axisY;\n\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\n\nexport function transformsArrayToProps(transformObjectsArray) {\n  var props = {};\n  transformObjectsArray === null || transformObjectsArray === void 0 ? void 0 : transformObjectsArray.forEach(function (transformObject) {\n    var keys = Object.keys(transformObject);\n\n    if (keys.length !== 1) {\n      console.error('You must specify exactly one property per transform object.');\n    }\n\n    var key = keys[0];\n    var value = transformObject[key];\n    props[key] = value;\n  });\n  return props;\n}\nexport function props2transform(props) {\n  if (!props) {\n    return null;\n  }\n\n  var extractedProps = Array.isArray(props) ? transformsArrayToProps(props) : props;\n  var rotation = extractedProps.rotation,\n      translate = extractedProps.translate,\n      translateX = extractedProps.translateX,\n      translateY = extractedProps.translateY,\n      origin = extractedProps.origin,\n      originX = extractedProps.originX,\n      originY = extractedProps.originY,\n      scale = extractedProps.scale,\n      scaleX = extractedProps.scaleX,\n      scaleY = extractedProps.scaleY,\n      skew = extractedProps.skew,\n      skewX = extractedProps.skewX,\n      skewY = extractedProps.skewY,\n      x = extractedProps.x,\n      y = extractedProps.y;\n\n  if (rotation == null && translate == null && translateX == null && translateY == null && origin == null && originX == null && originY == null && scale == null && scaleX == null && scaleY == null && skew == null && skewX == null && skewY == null && x == null && y == null) {\n    return null;\n  }\n\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn('Passing SvgLengthList to x or y attribute where SvgLength expected');\n  }\n\n  var tr = universal2axis(translate, translateX || (Array.isArray(x) ? x[0] : x), translateY || (Array.isArray(y) ? y[0] : y));\n  var or = universal2axis(origin, originX, originY);\n  var sc = universal2axis(scale, scaleX, scaleY, 1);\n  var sk = universal2axis(skew, skewX, skewY);\n  return {\n    rotation: rotation == null ? 0 : +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1]\n  };\n}\nexport function transformToMatrix(props, transform) {\n  if (!props && !transform) {\n    return null;\n  }\n\n  reset();\n  props && appendTransformProps(props);\n\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        var columnMatrix = transform;\n        append(columnMatrix[0], columnMatrix[1], columnMatrix[2], columnMatrix[3], columnMatrix[4], columnMatrix[5]);\n      } else {\n        var transformProps = props2transform(transformsArrayToProps(transform));\n        transformProps && appendTransformProps(transformProps);\n      }\n    } else if (typeof transform === 'string') {\n      try {\n        var t = parse(transform);\n        append(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      var _transformProps = props2transform(transform);\n\n      _transformProps && appendTransformProps(_transformProps);\n    }\n  }\n\n  return toArray();\n}\nexport default function extractTransform(props) {\n  if (Array.isArray(props) && typeof props[0] === 'number') {\n    return props;\n  }\n\n  if (typeof props === 'string') {\n    try {\n      var t = parse(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return identity;\n    }\n  }\n\n  var transformProps = props;\n  return transformToMatrix(props2transform(transformProps), transformProps === null || transformProps === void 0 ? void 0 : transformProps.transform);\n}","map":{"version":3,"sources":["lib/extract/extractTransform.ts"],"names":["append","appendTransform","identity","reset","toArray","parse","appendTransformProps","props","x","y","originX","originY","scaleX","scaleY","rotation","skewX","skewY","universal2axis","universal","axisX","axisY","defaultValue","coords","split","length","Array","isArray","isNaN","transformsArrayToProps","transformObjectsArray","forEach","transformObject","keys","Object","console","error","key","value","props2transform","extractedProps","translate","translateX","translateY","origin","scale","skew","warn","tr","or","sc","sk","transformToMatrix","transform","columnMatrix","transformProps","t","e","extractTransform"],"mappings":"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","sourceRoot":"../../../../src","sourcesContent":["import { append, appendTransform, identity, reset, toArray } from '../Matrix2D';\nimport { parse } from './transform';\nfunction appendTransformProps(props) {\n  const {\n    x,\n    y,\n    originX,\n    originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY\n  } = props;\n  appendTransform(x + originX, y + originY, scaleX, scaleY, rotation, skewX, skewY, originX, originY);\n}\nfunction universal2axis(universal, axisX, axisY, defaultValue) {\n  let x;\n  let y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    const coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\nexport function transformsArrayToProps(transformObjectsArray) {\n  const props = {};\n  transformObjectsArray === null || transformObjectsArray === void 0 ? void 0 : transformObjectsArray.forEach(transformObject => {\n    const keys = Object.keys(transformObject);\n    if (keys.length !== 1) {\n      console.error('You must specify exactly one property per transform object.');\n    }\n    const key = keys[0];\n    const value = transformObject[key];\n    props[key] = value;\n  });\n  return props;\n}\nexport function props2transform(props) {\n  if (!props) {\n    return null;\n  }\n  const extractedProps = Array.isArray(props) ? transformsArrayToProps(props) : props;\n  const {\n    rotation,\n    translate,\n    translateX,\n    translateY,\n    origin,\n    originX,\n    originY,\n    scale,\n    scaleX,\n    scaleY,\n    skew,\n    skewX,\n    skewY,\n    x,\n    y\n  } = extractedProps;\n  if (rotation == null && translate == null && translateX == null && translateY == null && origin == null && originX == null && originY == null && scale == null && scaleX == null && scaleY == null && skew == null && skewX == null && skewY == null && x == null && y == null) {\n    return null;\n  }\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn('Passing SvgLengthList to x or y attribute where SvgLength expected');\n  }\n  const tr = universal2axis(translate, translateX || (Array.isArray(x) ? x[0] : x), translateY || (Array.isArray(y) ? y[0] : y));\n  const or = universal2axis(origin, originX, originY);\n  const sc = universal2axis(scale, scaleX, scaleY, 1);\n  const sk = universal2axis(skew, skewX, skewY);\n  return {\n    rotation: rotation == null ? 0 : +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1]\n  };\n}\nexport function transformToMatrix(props, transform) {\n  if (!props && !transform) {\n    return null;\n  }\n  reset();\n  props && appendTransformProps(props);\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        const columnMatrix = transform;\n        append(columnMatrix[0], columnMatrix[1], columnMatrix[2], columnMatrix[3], columnMatrix[4], columnMatrix[5]);\n      } else {\n        const transformProps = props2transform(transformsArrayToProps(transform));\n        transformProps && appendTransformProps(transformProps);\n      }\n    } else if (typeof transform === 'string') {\n      try {\n        const t = parse(transform);\n        append(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      const transformProps = props2transform(transform);\n      transformProps && appendTransformProps(transformProps);\n    }\n  }\n  return toArray();\n}\nexport default function extractTransform(props) {\n  if (Array.isArray(props) && typeof props[0] === 'number') {\n    return props;\n  }\n  if (typeof props === 'string') {\n    try {\n      const t = parse(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return identity;\n    }\n  }\n  // this type is not correct since props can be of type TransformsStyle['transform'] too\n  // but it satisfies TS and should not produce any type errors\n  const transformProps = props;\n  return transformToMatrix(props2transform(transformProps), transformProps === null || transformProps === void 0 ? void 0 : transformProps.transform);\n}\n//# sourceMappingURL=extractTransform.js.map"]},"metadata":{},"sourceType":"module"}