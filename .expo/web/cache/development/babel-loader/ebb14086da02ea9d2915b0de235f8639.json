{"ast":null,"code":"import NativeModulesProxy from \"./NativeModulesProxy\";\nexport function requireNativeModule(moduleName) {\n  var _ref, _globalThis$expo$modu, _globalThis$expo, _globalThis$expo$modu2, _globalThis$ExpoModul;\n\n  var nativeModule = (_ref = (_globalThis$expo$modu = (_globalThis$expo = globalThis.expo) == null ? void 0 : (_globalThis$expo$modu2 = _globalThis$expo.modules) == null ? void 0 : _globalThis$expo$modu2[moduleName]) != null ? _globalThis$expo$modu : (_globalThis$ExpoModul = globalThis.ExpoModules) == null ? void 0 : _globalThis$ExpoModul[moduleName]) != null ? _ref : NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n\n  return nativeModule;\n}","map":{"version":3,"sources":["../src/requireNativeModule.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAP;AAkCA,OAAM,SAAU,mBAAV,CAAgD,UAAhD,EAAkE;EAAA;;EACtE,IAAM,YAAY,wDAChB,UAAU,CAAC,IADK,+CAChB,iBAAiB,OADD,qBAChB,uBAA2B,UAA3B,CADgB,6DAEhB,UAAU,CAAC,WAFK,qBAEhB,sBAAyB,UAAzB,CAFgB,mBAGhB,kBAAkB,CAAC,UAAD,CAHpB;;EAKA,IAAI,CAAC,YAAL,EAAmB;IACjB,MAAM,IAAI,KAAJ,CAAU,8BAA8B,UAAU,GAAlD,CAAN;EACD;;EACD,OAAO,YAAP;AACD","sourcesContent":["import NativeModulesProxy from './NativeModulesProxy';\n\ntype ExpoObject = {\n  modules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n};\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var expo: ExpoObject | undefined;\n\n  /**\n   * @deprecated `global.ExpoModules` is deprecated, use `global.expo.modules` instead.\n   */\n  // eslint-disable-next-line no-var\n  var ExpoModules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n}\n\n/**\n * Imports the native module registered with given name. In the first place it tries to load\n * the module installed through the JSI host object and then falls back to the bridge proxy module.\n * Notice that the modules loaded from the proxy may not support some features like synchronous functions.\n *\n * @param moduleName Name of the requested native module.\n * @returns Object representing the native module.\n * @throws Error when there is no native module with given name.\n */\nexport function requireNativeModule<ModuleType = any>(moduleName: string): ModuleType {\n  const nativeModule: ModuleType =\n    globalThis.expo?.modules?.[moduleName] ??\n    globalThis.ExpoModules?.[moduleName] ??\n    NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n  return nativeModule;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}