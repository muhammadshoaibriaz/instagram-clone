{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { useEvent } from \"./utils\";\nimport { useSharedValue } from \"./useSharedValue\";\nvar scrollEventNames = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];\nvar _worklet_11084696489065_init_data = {\n  code: \"function anonymous(event) {\\n  const {\\n    offsetRef\\n  } = this._closure;\\n  offsetRef.current.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\\n}\",\n  location: \"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useScrollViewOffset.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"event\\\",\\\"offsetRef\\\",\\\"_closure\\\",\\\"current\\\",\\\"value\\\",\\\"contentOffset\\\",\\\"x\\\",\\\"y\\\"],\\\"sources\\\":[\\\"/Users/Shoaib/Awesome/node_modules/react-native-reanimated/lib/module/reanimated2/hook/useScrollViewOffset.js\\\"],\\\"mappings\\\":\\\"AAOyB,SAAAA,SAASA,CAAAC,KAAA;EAAA;IAAAC;EAAA,SAAAC,QAAA;EAG9BD,SAAS,CAACE,OAAO,CAACC,KAAK,GAAGJ,KAAK,CAACK,aAAa,CAACC,CAAC,KAAK,CAAC,GAAGN,KAAK,CAACK,aAAa,CAACE,CAAC,GAAGP,KAAK,CAACK,aAAa,CAACC,CAAC;AACvG\\\"}\"\n};\nexport function useScrollViewOffset(aref, initialRef) {\n  var offsetRef = useRef(initialRef !== undefined ? initialRef : useSharedValue(0));\n  var event = useEvent(function () {\n    var _e = [new global.Error(), -2, -27];\n\n    var _f = function _f(event) {\n      offsetRef.current.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n    };\n\n    _f._closure = {\n      offsetRef: offsetRef\n    };\n    _f.__initData = _worklet_11084696489065_init_data;\n    _f.__workletHash = 11084696489065;\n    _f.__stackDetails = _e;\n    _f.__version = \"3.3.0\";\n    return _f;\n  }(), scrollEventNames);\n  useEffect(function () {\n    var _event$current;\n\n    var viewTag = findNodeHandle(aref.current);\n    (_event$current = event.current) === null || _event$current === void 0 ? void 0 : _event$current.registerForEvents(viewTag);\n  }, [aref.current]);\n  return offsetRef.current;\n}","map":{"version":3,"sources":["useScrollViewOffset.ts"],"names":["useEffect","useRef","useEvent","useSharedValue","scrollEventNames","useScrollViewOffset","aref","initialRef","offsetRef","undefined","event","current","value","contentOffset","x","y","viewTag","findNodeHandle","registerForEvents"],"mappings":"AAAA,SAAoBA,SAApB,EAA+BC,MAA/B,QAA6C,OAA7C;;AAMA,SAASC,QAAT;AACA,SAASC,cAAT;AAEA,IAAMC,gBAAgB,GAAG,CACvB,UADuB,EAEvB,mBAFuB,EAGvB,iBAHuB,EAIvB,uBAJuB,EAKvB,qBALuB,CAAzB;;;;;;AAQA,OAAO,SAASC,mBAAT,CACLC,IADK,EAELC,UAFK,EAGgB;EACrB,IAAMC,SAAS,GAAGP,MAAM,CACtBM,UAAU,KAAKE,SAAfF,GAA2BA,UAA3BA,GAAwCJ,cAAc,CAAC,CAAD,CADhC,CAAxB;EAIA,IAAMO,KAAK,GAAGR,QAAQ;IAAA;;IAAA,qBAAeQ,KAAf,EAAsC;MAE1DF,SAAS,CAACG,OAAVH,CAAkBI,KAAlBJ,GACEE,KAAK,CAACG,aAANH,CAAoBI,CAApBJ,KAA0B,CAA1BA,GACIA,KAAK,CAACG,aAANH,CAAoBK,CADxBL,GAEIA,KAAK,CAACG,aAANH,CAAoBI,CAH1BN;IAID,CANqB;;IAAA;MAAA,WApBxB;IAoBwB;IAAA;IAAA;IAAA;IAAA;IAAA;EAAA,KAMnBJ,gBANmB,CAAtB;EAQAJ,SAAS,CAAC,YAAM;IAAA,IAAA,cAAA;;IACd,IAAMgB,OAAO,GAAGC,cAAc,CAACX,IAAI,CAACK,OAAN,CAA9B;IACA,CAAA,cAAA,GAAA,KAAK,CAACA,OAAN,MAAa,IAAb,IAAa,cAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAA,cAAA,CAAeO,iBAAf,CAAiCF,OAAjC,CAAA;EACD,CAHQ,EAGN,CAACV,IAAI,CAACK,OAAN,CAHM,CAATX;EAKA,OAAOQ,SAAS,CAACG,OAAjB;AACF","sourcesContent":["import { RefObject, useEffect, useRef } from 'react';\n\nimport type Animated from 'react-native-reanimated';\nimport { ScrollEvent } from './useAnimatedScrollHandler';\nimport { SharedValue } from '../commonTypes';\nimport { findNodeHandle } from 'react-native';\nimport { useEvent } from './utils';\nimport { useSharedValue } from './useSharedValue';\n\nconst scrollEventNames = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n];\n\nexport function useScrollViewOffset(\n  aref: RefObject<Animated.ScrollView>,\n  initialRef?: SharedValue<number>\n): SharedValue<number> {\n  const offsetRef = useRef(\n    initialRef !== undefined ? initialRef : useSharedValue(0)\n  );\n\n  const event = useEvent<ScrollEvent>((event: ScrollEvent) => {\n    'worklet';\n    offsetRef.current.value =\n      event.contentOffset.x === 0\n        ? event.contentOffset.y\n        : event.contentOffset.x;\n  }, scrollEventNames);\n\n  useEffect(() => {\n    const viewTag = findNodeHandle(aref.current);\n    event.current?.registerForEvents(viewTag as number);\n  }, [aref.current]);\n\n  return offsetRef.current;\n}\n"]},"metadata":{},"sourceType":"module"}