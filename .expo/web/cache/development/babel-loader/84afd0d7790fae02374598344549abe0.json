{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport JSReanimated from \"./JSReanimated\";\nimport { isWeb } from \"../PlatformChecker\";\nvar createReactDOMStyle;\nvar createTransformValue;\n\nif (isWeb()) {\n  try {\n    createReactDOMStyle = require('react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle').default;\n  } catch (e) {}\n\n  try {\n    createTransformValue = require('react-native-web/dist/exports/StyleSheet/preprocess').createTransformValue;\n  } catch (e) {}\n}\n\nvar reanimatedJS = new JSReanimated();\n\nglobal._makeShareableClone = function (c) {\n  return c;\n};\n\nglobal._scheduleOnJS = queueMicrotask;\nexport var _updatePropsJS = function _updatePropsJS(updates, viewRef) {\n  if (viewRef._component) {\n    var component = viewRef._component;\n\n    var _Object$keys$reduce = Object.keys(updates).reduce(function (acc, key) {\n      var value = updates[key];\n      var index = typeof value === 'function' ? 1 : 0;\n      acc[index][key] = value;\n      return acc;\n    }, [{}, {}]),\n        _Object$keys$reduce2 = _slicedToArray(_Object$keys$reduce, 1),\n        rawStyles = _Object$keys$reduce2[0];\n\n    if (typeof component.setNativeProps === 'function') {\n      setNativeProps(component, rawStyles);\n    } else if (createReactDOMStyle !== undefined && component.style !== undefined) {\n      updatePropsDOM(component, rawStyles);\n    } else if (Object.keys(component.props).length > 0) {\n      Object.keys(component.props).forEach(function (key) {\n        if (!rawStyles[key]) {\n          return;\n        }\n\n        var dashedKey = key.replace(/[A-Z]/g, function (m) {\n          return '-' + m.toLowerCase();\n        });\n\n        component._touchableNode.setAttribute(dashedKey, rawStyles[key]);\n      });\n    } else {\n      console.warn('It is not possible to manipulate component');\n    }\n  }\n};\n\nvar setNativeProps = function setNativeProps(component, style) {\n  var _component$setNativeP;\n\n  var previousStyle = component.previousStyle ? component.previousStyle : {};\n\n  var currentStyle = _objectSpread(_objectSpread({}, previousStyle), style);\n\n  component.previousStyle = currentStyle;\n  (_component$setNativeP = component.setNativeProps) === null || _component$setNativeP === void 0 ? void 0 : _component$setNativeP.call(component, {\n    style: currentStyle\n  });\n};\n\nvar updatePropsDOM = function updatePropsDOM(component, style) {\n  var previousStyle = component.previousStyle ? component.previousStyle : {};\n\n  var currentStyle = _objectSpread(_objectSpread({}, previousStyle), style);\n\n  component.previousStyle = currentStyle;\n  var domStyle = createReactDOMStyle(currentStyle);\n\n  if (Array.isArray(domStyle.transform) && createTransformValue !== undefined) {\n    domStyle.transform = createTransformValue(domStyle.transform);\n  }\n\n  for (var key in domStyle) {\n    component.style[key] = domStyle[key];\n  }\n};\n\nexport default reanimatedJS;","map":{"version":3,"sources":["index.ts"],"names":["JSReanimated","isWeb","createReactDOMStyle","createTransformValue","require","default","e","reanimatedJS","global","_makeShareableClone","c","_scheduleOnJS","queueMicrotask","_updatePropsJS","updates","viewRef","_component","component","rawStyles","Object","keys","reduce","acc","key","value","index","setNativeProps","undefined","style","updatePropsDOM","props","length","forEach","dashedKey","replace","m","toLowerCase","_touchableNode","setAttribute","console","warn","previousStyle","currentStyle","domStyle","Array","isArray","transform"],"mappings":"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","sourcesContent":["import JSReanimated from './JSReanimated';\nimport { AnimatedStyle, StyleProps } from '../commonTypes';\nimport { isWeb } from '../PlatformChecker';\n\nlet createReactDOMStyle: (style: any) => any;\nlet createTransformValue: (transform: any) => any;\n\nif (isWeb()) {\n  try {\n    createReactDOMStyle =\n      require('react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle').default;\n  } catch (e) {}\n\n  try {\n    // React Native Web 0.19+\n    createTransformValue =\n      require('react-native-web/dist/exports/StyleSheet/preprocess').createTransformValue;\n  } catch (e) {}\n}\n\nconst reanimatedJS = new JSReanimated();\n\nglobal._makeShareableClone = (c) => c;\nglobal._scheduleOnJS = queueMicrotask;\n\ninterface JSReanimatedComponent {\n  previousStyle: StyleProps;\n  setNativeProps?: (style: StyleProps) => void;\n  style?: StyleProps;\n  props: Record<string, string | number>;\n  _touchableNode: {\n    setAttribute: (key: string, props: unknown) => void;\n  };\n}\n\nexport const _updatePropsJS = (\n  updates: StyleProps | AnimatedStyle,\n  viewRef: { _component?: JSReanimatedComponent }\n): void => {\n  if (viewRef._component) {\n    const component = viewRef._component;\n    const [rawStyles] = Object.keys(updates).reduce(\n      (acc: [StyleProps, AnimatedStyle], key) => {\n        const value = updates[key];\n        const index = typeof value === 'function' ? 1 : 0;\n        acc[index][key] = value;\n        return acc;\n      },\n      [{}, {}]\n    );\n\n    if (typeof component.setNativeProps === 'function') {\n      // This is the legacy way to update props on React Native Web <= 0.18.\n      // Also, some components (e.g. from react-native-svg) don't have styles\n      // and always provide setNativeProps function instead (even on React Native Web 0.19+).\n      setNativeProps(component, rawStyles);\n    } else if (\n      createReactDOMStyle !== undefined &&\n      component.style !== undefined\n    ) {\n      // React Native Web 0.19+ no longer provides setNativeProps function,\n      // so we need to update DOM nodes directly.\n      updatePropsDOM(component, rawStyles);\n    } else if (Object.keys(component.props).length > 0) {\n      Object.keys(component.props).forEach((key) => {\n        if (!rawStyles[key]) {\n          return;\n        }\n        const dashedKey = key.replace(/[A-Z]/g, (m) => '-' + m.toLowerCase());\n        component._touchableNode.setAttribute(dashedKey, rawStyles[key]);\n      });\n    } else {\n      console.warn('It is not possible to manipulate component');\n    }\n  }\n};\n\nconst setNativeProps = (\n  component: JSReanimatedComponent,\n  style: StyleProps\n): void => {\n  const previousStyle = component.previousStyle ? component.previousStyle : {};\n  const currentStyle = { ...previousStyle, ...style };\n  component.previousStyle = currentStyle;\n  component.setNativeProps?.({ style: currentStyle });\n};\n\nconst updatePropsDOM = (\n  component: JSReanimatedComponent,\n  style: StyleProps\n): void => {\n  const previousStyle = component.previousStyle ? component.previousStyle : {};\n  const currentStyle = { ...previousStyle, ...style };\n  component.previousStyle = currentStyle;\n\n  const domStyle = createReactDOMStyle(currentStyle);\n  if (Array.isArray(domStyle.transform) && createTransformValue !== undefined) {\n    domStyle.transform = createTransformValue(domStyle.transform);\n  }\n  for (const key in domStyle) {\n    (component.style as StyleProps)[key] = domStyle[key];\n  }\n};\n\nexport default reanimatedJS;\n"]},"metadata":{},"sourceType":"module"}