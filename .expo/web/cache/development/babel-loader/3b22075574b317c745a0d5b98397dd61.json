{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"colors\", \"locations\", \"startPoint\", \"endPoint\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { normalizeColor } from \"./normalizeColor\";\nexport default function NativeLinearGradient(_ref) {\n  var colors = _ref.colors,\n      locations = _ref.locations,\n      startPoint = _ref.startPoint,\n      endPoint = _ref.endPoint,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState({\n    height: 1,\n    width: 1\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      _React$useState2$ = _React$useState2[0],\n      height = _React$useState2$.height,\n      width = _React$useState2$.width,\n      setLayout = _React$useState2[1];\n\n  var linearGradientBackgroundImage = React.useMemo(function () {\n    return getLinearGradientBackgroundImage(colors, locations, startPoint, endPoint, width, height);\n  }, [colors, locations, startPoint, endPoint, width, height]);\n  return React.createElement(View, _objectSpread(_objectSpread({}, props), {}, {\n    style: [props.style, {\n      backgroundImage: linearGradientBackgroundImage\n    }],\n    onLayout: function onLayout(event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          width = _event$nativeEvent$la.width,\n          height = _event$nativeEvent$la.height;\n      setLayout(function (oldLayout) {\n        if (width !== oldLayout.width || height !== oldLayout.height) {\n          return {\n            height: height,\n            width: width\n          };\n        }\n\n        return oldLayout;\n      });\n\n      if (props.onLayout) {\n        props.onLayout(event);\n      }\n    }\n  }));\n}\nexport function getLinearGradientBackgroundImage(colors, locations, startPoint, endPoint) {\n  var width = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var height = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var gradientColors = calculateGradientColors(colors, locations);\n  var angle = calculatePseudoAngle(width, height, startPoint, endPoint);\n  return `linear-gradient(${angle}deg, ${gradientColors.join(', ')})`;\n}\n\nfunction calculatePseudoAngle(width, height, startPoint, endPoint) {\n  var getControlPoints = function getControlPoints() {\n    var correctedStartPoint = [0, 0];\n\n    if (Array.isArray(startPoint)) {\n      correctedStartPoint = [startPoint[0] != null ? startPoint[0] : 0.0, startPoint[1] != null ? startPoint[1] : 0.0];\n    }\n\n    var correctedEndPoint = [0.0, 1.0];\n\n    if (Array.isArray(endPoint)) {\n      correctedEndPoint = [endPoint[0] != null ? endPoint[0] : 0.0, endPoint[1] != null ? endPoint[1] : 1.0];\n    }\n\n    return [correctedStartPoint, correctedEndPoint];\n  };\n\n  var _getControlPoints = getControlPoints(),\n      _getControlPoints2 = _slicedToArray(_getControlPoints, 2),\n      start = _getControlPoints2[0],\n      end = _getControlPoints2[1];\n\n  start[0] *= width;\n  end[0] *= width;\n  start[1] *= height;\n  end[1] *= height;\n  var py = end[1] - start[1];\n  var px = end[0] - start[0];\n  return 90 + Math.atan2(py, px) * 180 / Math.PI;\n}\n\nfunction calculateGradientColors(colors, locations) {\n  return colors.map(function (color, index) {\n    var output = normalizeColor(color);\n\n    if (locations && locations[index]) {\n      var location = Math.max(0, Math.min(1, locations[index]));\n      var percentage = location * 100;\n      return `${output} ${percentage}%`;\n    }\n\n    return output;\n  });\n}","map":{"version":3,"sources":["../src/NativeLinearGradient.web.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { NativeLinearGradientPoint, NativeLinearGradientProps } from './NativeLinearGradient.types';\nimport { normalizeColor } from './normalizeColor';\n\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: NativeLinearGradientProps): React.ReactElement {\n  const [{ height, width }, setLayout] = React.useState({\n    height: 1,\n    width: 1,\n  });\n\n  // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  const linearGradientBackgroundImage = React.useMemo(() => {\n    return getLinearGradientBackgroundImage(colors, locations, startPoint, endPoint, width, height);\n  }, [colors, locations, startPoint, endPoint, width, height]);\n\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage: linearGradientBackgroundImage },\n      ]}\n      onLayout={(event) => {\n        const { width, height } = event.nativeEvent.layout;\n\n        setLayout((oldLayout) => {\n          // don't set new layout state unless the layout has actually changed\n          if (width !== oldLayout.width || height !== oldLayout.height) {\n            return { height, width };\n          }\n\n          return oldLayout;\n        });\n\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n}\n\n/**\n * Extracted to a separate function in order to be able to test logic independently.\n */\nexport function getLinearGradientBackgroundImage(\n  colors: number[] | string[],\n  locations?: number[] | null,\n  startPoint?: NativeLinearGradientPoint | null,\n  endPoint?: NativeLinearGradientPoint | null,\n  width: number = 1,\n  height: number = 1\n) {\n  const gradientColors = calculateGradientColors(colors, locations);\n  const angle = calculatePseudoAngle(width, height, startPoint, endPoint);\n  return `linear-gradient(${angle}deg, ${gradientColors.join(', ')})`;\n}\n\nfunction calculatePseudoAngle(\n  width: number,\n  height: number,\n  startPoint?: NativeLinearGradientPoint | null,\n  endPoint?: NativeLinearGradientPoint | null\n) {\n  const getControlPoints = (): NativeLinearGradientPoint[] => {\n    let correctedStartPoint: NativeLinearGradientPoint = [0, 0];\n    if (Array.isArray(startPoint)) {\n      correctedStartPoint = [\n        startPoint[0] != null ? startPoint[0] : 0.0,\n        startPoint[1] != null ? startPoint[1] : 0.0,\n      ];\n    }\n    let correctedEndPoint: NativeLinearGradientPoint = [0.0, 1.0];\n    if (Array.isArray(endPoint)) {\n      correctedEndPoint = [\n        endPoint[0] != null ? endPoint[0] : 0.0,\n        endPoint[1] != null ? endPoint[1] : 1.0,\n      ];\n    }\n    return [correctedStartPoint, correctedEndPoint];\n  };\n\n  const [start, end] = getControlPoints();\n  start[0] *= width;\n  end[0] *= width;\n  start[1] *= height;\n  end[1] *= height;\n  const py = end[1] - start[1];\n  const px = end[0] - start[0];\n\n  return 90 + (Math.atan2(py, px) * 180) / Math.PI;\n}\n\nfunction calculateGradientColors(colors: number[] | string[], locations?: number[] | null) {\n  return colors.map((color: number | string, index: number): string | void => {\n    const output = normalizeColor(color);\n    if (locations && locations[index]) {\n      const location = Math.max(0, Math.min(1, locations[index]));\n      // Convert 0...1 to 0...100\n      const percentage = location * 100;\n      return `${output} ${percentage}%`;\n    }\n    return output;\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}