{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport CircularBuffer from \"./CircularBuffer\";\nimport LeastSquareSolver from \"./LeastSquareSolver\";\n\nvar VelocityTracker = function () {\n  function VelocityTracker() {\n    _classCallCheck(this, VelocityTracker);\n\n    _defineProperty(this, \"assumePointerMoveStoppedMilliseconds\", 40);\n\n    _defineProperty(this, \"historySize\", 20);\n\n    _defineProperty(this, \"horizonMilliseconds\", 300);\n\n    _defineProperty(this, \"minSampleSize\", 3);\n\n    _defineProperty(this, \"samples\", void 0);\n\n    this.samples = new CircularBuffer(this.historySize);\n  }\n\n  _createClass(VelocityTracker, [{\n    key: \"add\",\n    value: function add(event) {\n      this.samples.push(event);\n    }\n  }, {\n    key: \"getVelocityEstimate\",\n    value: function getVelocityEstimate() {\n      var x = [];\n      var y = [];\n      var w = [];\n      var time = [];\n      var sampleCount = 0;\n      var index = this.samples.size - 1;\n      var newestSample = this.samples.get(index);\n\n      if (!newestSample) {\n        return null;\n      }\n\n      var previousSample = newestSample;\n\n      while (sampleCount < this.samples.size) {\n        var sample = this.samples.get(index);\n        var age = newestSample.time - sample.time;\n        var delta = Math.abs(sample.time - previousSample.time);\n        previousSample = sample;\n\n        if (age > this.horizonMilliseconds || delta > this.assumePointerMoveStoppedMilliseconds) {\n          break;\n        }\n\n        x.push(sample.x);\n        y.push(sample.y);\n        w.push(1);\n        time.push(-age);\n        sampleCount++;\n        index--;\n      }\n\n      if (sampleCount >= this.minSampleSize) {\n        var xSolver = new LeastSquareSolver(time, x, w);\n        var xFit = xSolver.solve(2);\n\n        if (xFit !== null) {\n          var ySolver = new LeastSquareSolver(time, y, w);\n          var yFit = ySolver.solve(2);\n\n          if (yFit !== null) {\n            var xVelocity = xFit.coefficients[1] * 1000;\n            var yVelocity = yFit.coefficients[1] * 1000;\n            return [xVelocity, yVelocity];\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      var estimate = this.getVelocityEstimate();\n\n      if (estimate !== null) {\n        return estimate;\n      }\n\n      return [0, 0];\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.samples.clear();\n    }\n  }]);\n\n  return VelocityTracker;\n}();\n\nexport { VelocityTracker as default };","map":{"version":3,"sources":["VelocityTracker.ts"],"names":["constructor","add","getVelocityEstimate","x","y","w","time","sampleCount","index","newestSample","previousSample","sample","age","delta","Math","xSolver","xFit","ySolver","yFit","xVelocity","yVelocity","getVelocity","estimate","reset"],"mappings":"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","sourcesContent":["import { AdaptedEvent } from '../interfaces';\nimport CircularBuffer from './CircularBuffer';\nimport LeastSquareSolver from './LeastSquareSolver';\n\nexport default class VelocityTracker {\n  private assumePointerMoveStoppedMilliseconds = 40;\n  private historySize = 20;\n  private horizonMilliseconds = 300;\n  private minSampleSize = 3;\n\n  private samples: CircularBuffer<AdaptedEvent>;\n\n  constructor() {\n    this.samples = new CircularBuffer<AdaptedEvent>(this.historySize);\n  }\n\n  public add(event: AdaptedEvent): void {\n    this.samples.push(event);\n  }\n\n  /// Returns an estimate of the velocity of the object being tracked by the\n  /// tracker given the current information available to the tracker.\n  ///\n  /// Information is added using [addPosition].\n  ///\n  /// Returns null if there is no data on which to base an estimate.\n  private getVelocityEstimate(): [number, number] | null {\n    const x = [];\n    const y = [];\n    const w = [];\n    const time = [];\n\n    let sampleCount = 0;\n    let index = this.samples.size - 1;\n    const newestSample = this.samples.get(index);\n    if (!newestSample) {\n      return null;\n    }\n\n    let previousSample = newestSample;\n\n    // Starting with the most recent PointAtTime sample, iterate backwards while\n    // the samples represent continuous motion.\n    while (sampleCount < this.samples.size) {\n      const sample = this.samples.get(index);\n\n      const age = newestSample.time - sample.time;\n      const delta = Math.abs(sample.time - previousSample.time);\n      previousSample = sample;\n\n      if (\n        age > this.horizonMilliseconds ||\n        delta > this.assumePointerMoveStoppedMilliseconds\n      ) {\n        break;\n      }\n\n      x.push(sample.x);\n      y.push(sample.y);\n      w.push(1);\n      time.push(-age);\n\n      sampleCount++;\n      index--;\n    }\n\n    if (sampleCount >= this.minSampleSize) {\n      const xSolver = new LeastSquareSolver(time, x, w);\n      const xFit = xSolver.solve(2);\n\n      if (xFit !== null) {\n        const ySolver = new LeastSquareSolver(time, y, w);\n        const yFit = ySolver.solve(2);\n\n        if (yFit !== null) {\n          const xVelocity = xFit.coefficients[1] * 1000;\n          const yVelocity = yFit.coefficients[1] * 1000;\n\n          return [xVelocity, yVelocity];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public getVelocity(): [number, number] {\n    const estimate = this.getVelocityEstimate();\n    if (estimate !== null) {\n      return estimate;\n    }\n    return [0, 0];\n  }\n\n  public reset(): void {\n    this.samples.clear();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}