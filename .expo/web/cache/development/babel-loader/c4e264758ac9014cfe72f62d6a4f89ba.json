{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { EventTypes, MouseButtons, PointerType } from \"../interfaces\";\nimport EventManager from \"./EventManager\";\nimport { isPointerInBounds } from \"../utils\";\n\nvar PointerEventManager = function (_EventManager) {\n  _inherits(PointerEventManager, _EventManager);\n\n  var _super = _createSuper(PointerEventManager);\n\n  function PointerEventManager() {\n    var _this;\n\n    _classCallCheck(this, PointerEventManager);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"trackedPointers\", new Set());\n\n    return _this;\n  }\n\n  _createClass(PointerEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this2 = this;\n\n      this.view.addEventListener('pointerdown', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        if (!isPointerInBounds(_this2.view, {\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.DOWN);\n\n        var target = event.target;\n        target.setPointerCapture(adaptedEvent.pointerId);\n\n        _this2.markAsInBounds(adaptedEvent.pointerId);\n\n        _this2.trackedPointers.add(adaptedEvent.pointerId);\n\n        if (++_this2.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n\n          _this2.onPointerAdd(adaptedEvent);\n        } else {\n          _this2.onPointerDown(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        if (_this2.activePointersCounter === 0) {\n          return;\n        }\n\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.UP);\n\n        var target = event.target;\n        target.releasePointerCapture(adaptedEvent.pointerId);\n\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n\n        _this2.trackedPointers.delete(adaptedEvent.pointerId);\n\n        if (--_this2.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n\n          _this2.onPointerRemove(adaptedEvent);\n        } else {\n          _this2.onPointerUp(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        if (event.pointerType === PointerType.MOUSE && event.buttons !== MouseButtons.LEFT) {\n          return;\n        }\n\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.MOVE);\n\n        var inBounds = isPointerInBounds(_this2.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n\n        var pointerIndex = _this2.pointersInBounds.indexOf(adaptedEvent.pointerId);\n\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n\n            _this2.onPointerEnter(adaptedEvent);\n\n            _this2.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n\n            _this2.onPointerOut(adaptedEvent);\n\n            _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.CANCEL);\n\n        _this2.onPointerCancel(adaptedEvent);\n\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n\n        _this2.activePointersCounter = 0;\n\n        _this2.trackedPointers.clear();\n      });\n      this.view.addEventListener('lostpointercapture', function (event) {\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.CANCEL);\n\n        if (_this2.trackedPointers.has(adaptedEvent.pointerId)) {\n          _this2.onPointerCancel(adaptedEvent);\n\n          _this2.activePointersCounter = 0;\n\n          _this2.trackedPointers.clear();\n        }\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }, {\n    key: \"resetManager\",\n    value: function resetManager() {\n      _get(_getPrototypeOf(PointerEventManager.prototype), \"resetManager\", this).call(this);\n\n      this.trackedPointers.clear();\n    }\n  }]);\n\n  return PointerEventManager;\n}(EventManager);\n\nexport { PointerEventManager as default };","map":{"version":3,"sources":["PointerEventManager.ts"],"names":["setListeners","event","PointerType","isPointerInBounds","x","y","clientY","adaptedEvent","EventTypes","target","MouseButtons","inBounds","pointerIndex","mapEvent","offsetX","offsetY","pointerId","eventType","pointerType","buttons","time","timeStamp","resetManager"],"mappings":"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","sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  private trackedPointers = new Set<number>();\n\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n\n    this.view.addEventListener(\n      'lostpointercapture',\n      (event: PointerEvent): void => {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL\n        );\n\n        if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n          // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n          // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n          this.onPointerCancel(adaptedEvent);\n\n          this.activePointersCounter = 0;\n          this.trackedPointers.clear();\n        }\n      }\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}