{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nimport NativeReanimatedModule from \"./NativeReanimated\";\nimport { SensorType } from \"./commonTypes\";\nimport { makeMutable } from \"./mutables\";\n\nfunction initSensorData(sensorType) {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n      interfaceOrientation: 0\n    });\n  } else {\n    return makeMutable({\n      x: 0,\n      y: 0,\n      z: 0,\n      interfaceOrientation: 0\n    });\n  }\n}\n\nvar Sensor = function () {\n  function Sensor(sensorType, config) {\n    _classCallCheck(this, Sensor);\n\n    _defineProperty(this, \"listenersNumber\", 0);\n\n    _defineProperty(this, \"sensorId\", null);\n\n    _defineProperty(this, \"sensorType\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n\n    this.sensorType = sensorType;\n    this.config = config;\n    this.data = initSensorData(sensorType);\n  }\n\n  _createClass(Sensor, [{\n    key: \"register\",\n    value: function register(eventHandler) {\n      var config = this.config;\n      var sensorType = this.sensorType;\n      this.sensorId = NativeReanimatedModule.registerSensor(sensorType, config.interval === 'auto' ? -1 : config.interval, config.iosReferenceFrame, eventHandler);\n      return this.sensorId !== -1;\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return this.sensorId !== -1 && this.sensorId !== null;\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return this.sensorId !== -1;\n    }\n  }, {\n    key: \"getSharedValue\",\n    value: function getSharedValue() {\n      return this.data;\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      if (this.sensorId !== null && this.sensorId !== -1) {\n        NativeReanimatedModule.unregisterSensor(this.sensorId);\n      }\n\n      this.sensorId = null;\n    }\n  }]);\n\n  return Sensor;\n}();\n\nexport { Sensor as default };","map":{"version":3,"sources":["Sensor.ts"],"names":["NativeReanimatedModule","SensorType","makeMutable","initSensorData","sensorType","ROTATION","qw","qx","qy","qz","yaw","pitch","roll","interfaceOrientation","x","y","z","Sensor","_defineProperty","constructor","config","data","register","eventHandler","sensorId","registerSensor","interval","iosReferenceFrame","isRunning","isAvailable","getSharedValue","unregister","unregisterSensor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,sBAAP;AACA,SACEC,UADF;AAQA,SAASC,WAAT;;AAEA,SAASC,cAAT,CACEC,UADF,EAEwC;EACtC,IAAIA,UAAU,KAAKH,UAAU,CAACI,QAA9B,EAAwC;IACtC,OAAOH,WAAW,CAA0B;MAC1CI,EAAE,EAAE,CADsC;MAE1CC,EAAE,EAAE,CAFsC;MAG1CC,EAAE,EAAE,CAHsC;MAI1CC,EAAE,EAAE,CAJsC;MAK1CC,GAAG,EAAE,CALqC;MAM1CC,KAAK,EAAE,CANmC;MAO1CC,IAAI,EAAE,CAPoC;MAQ1CC,oBAAoB,EAAE;IARoB,CAA1B,CAAlB;EAUD,CAXD,MAWO;IACL,OAAOX,WAAW,CAA0B;MAC1CY,CAAC,EAAE,CADuC;MAE1CC,CAAC,EAAE,CAFuC;MAG1CC,CAAC,EAAE,CAHuC;MAI1CH,oBAAoB,EAAE;IAJoB,CAA1B,CAAlB;EAMF;AACF;;IAEqBI,M;EAOnBE,gBAAYf,UAAZe,EAAoCC,MAApCD,EAA0DD;IAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,iBAAAA,EANjC,CAMiCA,CAAAA;;IANhCA,eAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EACQ,IADRA,CAAAA;;IACYA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,MAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,KAAAA,CAAAA,CAAAA;;IAMpC,KAAKd,UAAL,GAAkBA,UAAlB;IACA,KAAKgB,MAAL,GAAcA,MAAd;IACA,KAAKC,IAAL,GAAYlB,cAAc,CAACC,UAAD,CAA1B;EACF;;;;WAEAkB,kBACEC,YADFD,EAEE;MACA,IAAMF,MAAM,GAAG,KAAKA,MAApB;MACA,IAAMhB,UAAU,GAAG,KAAKA,UAAxB;MACA,KAAKoB,QAAL,GAAgBxB,sBAAsB,CAACyB,cAAvBzB,CACdI,UADcJ,EAEdoB,MAAM,CAACM,QAAPN,KAAoB,MAApBA,GAA6B,CAAC,CAA9BA,GAAkCA,MAAM,CAACM,QAF3B1B,EAGdoB,MAAM,CAACO,iBAHO3B,EAIduB,YAJcvB,CAAhB;MAMA,OAAO,KAAKwB,QAAL,KAAkB,CAAC,CAA1B;IACF;;;WAEAI,qBAAY;MACV,OAAO,KAAKJ,QAAL,KAAkB,CAAC,CAAnB,IAAwB,KAAKA,QAAL,KAAkB,IAAjD;IACF;;;WAEAK,uBAAc;MACZ,OAAO,KAAKL,QAAL,KAAkB,CAAC,CAA1B;IACF;;;WAEAM,0BAAiB;MACf,OAAO,KAAKT,IAAZ;IACF;;;WAEAU,sBAAa;MACX,IAAI,KAAKP,QAAL,KAAkB,IAAlB,IAA0B,KAAKA,QAAL,KAAkB,CAAC,CAAjD,EAAoD;QAClDxB,sBAAsB,CAACgC,gBAAvBhC,CAAwC,KAAKwB,QAA7CxB;MACF;;MACA,KAAKwB,QAAL,GAAgB,IAAhB;IACF;;;;;;SA5CmBP,M","sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nimport {\n  SensorType,\n  SensorConfig,\n  SharedValue,\n  Value3D,\n  ValueRotation,\n  ShareableRef,\n} from './commonTypes';\nimport { makeMutable } from './mutables';\n\nfunction initSensorData(\n  sensorType: SensorType\n): SharedValue<Value3D | ValueRotation> {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable<Value3D | ValueRotation>({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n      interfaceOrientation: 0,\n    });\n  } else {\n    return makeMutable<Value3D | ValueRotation>({\n      x: 0,\n      y: 0,\n      z: 0,\n      interfaceOrientation: 0,\n    });\n  }\n}\n\nexport default class Sensor<T> {\n  public listenersNumber = 0;\n  private sensorId: number | null = null;\n  private sensorType: SensorType;\n  private data: SharedValue<Value3D | ValueRotation>;\n  private config: SensorConfig;\n\n  constructor(sensorType: SensorType, config: SensorConfig) {\n    this.sensorType = sensorType;\n    this.config = config;\n    this.data = initSensorData(sensorType);\n  }\n\n  register(\n    eventHandler: ShareableRef<T> | ((data: Value3D | ValueRotation) => void)\n  ) {\n    const config = this.config;\n    const sensorType = this.sensorType;\n    this.sensorId = NativeReanimatedModule.registerSensor(\n      sensorType,\n      config.interval === 'auto' ? -1 : config.interval,\n      config.iosReferenceFrame,\n      eventHandler\n    );\n    return this.sensorId !== -1;\n  }\n\n  isRunning() {\n    return this.sensorId !== -1 && this.sensorId !== null;\n  }\n\n  isAvailable() {\n    return this.sensorId !== -1;\n  }\n\n  getSharedValue() {\n    return this.data;\n  }\n\n  unregister() {\n    if (this.sensorId !== null && this.sensorId !== -1) {\n      NativeReanimatedModule.unregisterSensor(this.sensorId);\n    }\n    this.sensorId = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}