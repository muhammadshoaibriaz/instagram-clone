{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nimport Sensor from \"./Sensor\";\nexport var SensorContainer = function () {\n  function SensorContainer() {\n    _classCallCheck(this, SensorContainer);\n\n    _defineProperty(this, \"nativeSensors\", new Map());\n  }\n\n  _createClass(SensorContainer, [{\n    key: \"getSensorId\",\n    value: function getSensorId(sensorType, config) {\n      return sensorType * 100 + config.iosReferenceFrame * 10 + Number(config.adjustToInterfaceOrientation);\n    }\n  }, {\n    key: \"initializeSensor\",\n    value: function initializeSensor(sensorType, config) {\n      var sensorId = this.getSensorId(sensorType, config);\n\n      if (!this.nativeSensors.has(sensorId)) {\n        var newSensor = new Sensor(sensorType, config);\n        this.nativeSensors.set(sensorId, newSensor);\n      }\n\n      var sensor = this.nativeSensors.get(sensorId);\n      return sensor.getSharedValue();\n    }\n  }, {\n    key: \"registerSensor\",\n    value: function registerSensor(sensorType, config, handler) {\n      var sensorId = this.getSensorId(sensorType, config);\n\n      if (!this.nativeSensors.has(sensorId)) {\n        return -1;\n      }\n\n      var sensor = this.nativeSensors.get(sensorId);\n\n      if (sensor && sensor.isAvailable() && (sensor.isRunning() || sensor.register(handler))) {\n        sensor.listenersNumber++;\n        return sensorId;\n      }\n\n      return -1;\n    }\n  }, {\n    key: \"unregisterSensor\",\n    value: function unregisterSensor(sensorId) {\n      if (this.nativeSensors.has(sensorId)) {\n        var sensor = this.nativeSensors.get(sensorId);\n\n        if (sensor && sensor.isRunning()) {\n          sensor.listenersNumber--;\n\n          if (sensor.listenersNumber === 0) {\n            sensor.unregister();\n          }\n        }\n      }\n    }\n  }]);\n\n  return SensorContainer;\n}();","map":{"version":3,"sources":["SensorContainer.ts"],"names":["Sensor","SensorContainer","constructor","Map","getSensorId","sensorType","config","iosReferenceFrame","Number","adjustToInterfaceOrientation","initializeSensor","sensorId","nativeSensors","has","newSensor","set","sensor","get","getSharedValue","registerSensor","handler","isAvailable","isRunning","register","listenersNumber","unregisterSensor","unregister"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,OAAOA,MAAP;AAEA,WAAaC,eAAb;EAA6BC,2BAAAA;IAAAA;;IAAAA,eAAAA,CAAAA,IAAAA,EAAAA,eAAAA,EACuB,IAAIC,GAAJ,EADvBD,CAAAA;EACgC;;EAD7D;IAAA;IAAA,OAGEE,qBAAYC,UAAZD,EAAoCE,MAApCF,EAA0D;MACxD,OACEC,UAAU,GAAG,GAAbA,GACAC,MAAM,CAACC,iBAAPD,GAA2B,EAD3BD,GAEAG,MAAM,CAACF,MAAM,CAACG,4BAAR,CAHR;IAKF;EATF;IAAA;IAAA,OAWEC,0BACEL,UADFK,EAEEJ,MAFFI,EAGwC;MACtC,IAAMC,QAAQ,GAAG,KAAKP,WAAL,CAAiBC,UAAjB,EAA6BC,MAA7B,CAAjB;;MAEA,IAAI,CAAC,KAAKM,aAAL,CAAmBC,GAAnB,CAAuBF,QAAvB,CAAL,EAAuC;QACrC,IAAMG,SAAS,GAAG,IAAId,MAAJ,CAAWK,UAAX,EAAuBC,MAAvB,CAAlB;QACA,KAAKM,aAAL,CAAmBG,GAAnB,CAAuBJ,QAAvB,EAAiCG,SAAjC;MACF;;MAEA,IAAME,MAAM,GAAG,KAAKJ,aAAL,CAAmBK,GAAnB,CAAuBN,QAAvB,CAAf;MACA,OAAOK,MAAM,CAAEE,cAARF,EAAP;IACF;EAxBF;IAAA;IAAA,OA0BEG,wBACEd,UADFc,EAEEb,MAFFa,EAGEC,OAHFD,EAIU;MACR,IAAMR,QAAQ,GAAG,KAAKP,WAAL,CAAiBC,UAAjB,EAA6BC,MAA7B,CAAjB;;MAEA,IAAI,CAAC,KAAKM,aAAL,CAAmBC,GAAnB,CAAuBF,QAAvB,CAAL,EAAuC;QACrC,OAAO,CAAC,CAAR;MACF;;MAEA,IAAMK,MAAM,GAAG,KAAKJ,aAAL,CAAmBK,GAAnB,CAAuBN,QAAvB,CAAf;;MACA,IACEK,MAAM,IACNA,MAAM,CAACK,WAAPL,EADAA,KAECA,MAAM,CAACM,SAAPN,MAAsBA,MAAM,CAACO,QAAPP,CAAgBI,OAAhBJ,CAFvBA,CADF,EAIE;QACAA,MAAM,CAACQ,eAAPR;QACA,OAAOL,QAAP;MACF;;MACA,OAAO,CAAC,CAAR;IACF;EA/CF;IAAA;IAAA,OAiDEc,0BAAiBd,QAAjBc,EAAmC;MACjC,IAAI,KAAKb,aAAL,CAAmBC,GAAnB,CAAuBF,QAAvB,CAAJ,EAAsC;QACpC,IAAMK,MAAM,GAAG,KAAKJ,aAAL,CAAmBK,GAAnB,CAAuBN,QAAvB,CAAf;;QACA,IAAIK,MAAM,IAAIA,MAAM,CAACM,SAAPN,EAAd,EAAkC;UAChCA,MAAM,CAACQ,eAAPR;;UACA,IAAIA,MAAM,CAACQ,eAAPR,KAA2B,CAA/B,EAAkC;YAChCA,MAAM,CAACU,UAAPV;UACF;QACF;MACF;IACF;EA3DF;;EAAA;AAAA","sourcesContent":["import {\n  SensorType,\n  SensorConfig,\n  Value3D,\n  ValueRotation,\n  ShareableRef,\n  SharedValue,\n} from './commonTypes';\nimport Sensor from './Sensor';\n\nexport class SensorContainer {\n  private nativeSensors: Map<number, Sensor<any>> = new Map();\n\n  getSensorId(sensorType: SensorType, config: SensorConfig) {\n    return (\n      sensorType * 100 +\n      config.iosReferenceFrame * 10 +\n      Number(config.adjustToInterfaceOrientation)\n    );\n  }\n\n  initializeSensor(\n    sensorType: SensorType,\n    config: SensorConfig\n  ): SharedValue<Value3D | ValueRotation> {\n    const sensorId = this.getSensorId(sensorType, config);\n\n    if (!this.nativeSensors.has(sensorId)) {\n      const newSensor = new Sensor(sensorType, config);\n      this.nativeSensors.set(sensorId, newSensor);\n    }\n\n    const sensor = this.nativeSensors.get(sensorId);\n    return sensor!.getSharedValue();\n  }\n\n  registerSensor<T>(\n    sensorType: SensorType,\n    config: SensorConfig,\n    handler: ShareableRef<T> | ((data: Value3D | ValueRotation) => void)\n  ): number {\n    const sensorId = this.getSensorId(sensorType, config);\n\n    if (!this.nativeSensors.has(sensorId)) {\n      return -1;\n    }\n\n    const sensor = this.nativeSensors.get(sensorId);\n    if (\n      sensor &&\n      sensor.isAvailable() &&\n      (sensor.isRunning() || sensor.register(handler))\n    ) {\n      sensor.listenersNumber++;\n      return sensorId;\n    }\n    return -1;\n  }\n\n  unregisterSensor(sensorId: number) {\n    if (this.nativeSensors.has(sensorId)) {\n      const sensor = this.nativeSensors.get(sensorId);\n      if (sensor && sensor.isRunning()) {\n        sensor.listenersNumber--;\n        if (sensor.listenersNumber === 0) {\n          sensor.unregister();\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}