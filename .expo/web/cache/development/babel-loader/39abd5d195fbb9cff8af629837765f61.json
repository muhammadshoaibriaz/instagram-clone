{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { jsVersion } from \"./jsVersion\";\nexport function checkCppVersion() {\n  var cppVersion = global._REANIMATED_VERSION_CPP;\n\n  if (cppVersion === undefined) {\n    throw new Error(`[Reanimated] Couldn't determine the version of the native part of Reanimated. Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must use the exact version which is bundled into Expo SDK.`);\n  }\n\n  var ok = matchVersion(jsVersion, cppVersion);\n\n  if (!ok) {\n    throw new Error(`[Reanimated] Mismatch between JavaScript part and native part of Reanimated (${jsVersion} vs. ${cppVersion}). Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must downgrade to ${cppVersion} which is bundled into Expo SDK.`);\n  }\n}\nexport function matchVersion(version1, version2) {\n  if (version1.match(/^\\d+\\.\\d+\\.\\d+$/) && version2.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    var _version1$split = version1.split('.'),\n        _version1$split2 = _slicedToArray(_version1$split, 2),\n        major1 = _version1$split2[0],\n        minor1 = _version1$split2[1];\n\n    var _version2$split = version2.split('.'),\n        _version2$split2 = _slicedToArray(_version2$split, 2),\n        major2 = _version2$split2[0],\n        minor2 = _version2$split2[1];\n\n    return major1 === major2 && minor1 === minor2;\n  } else {\n    return version1 === version2;\n  }\n}","map":{"version":3,"sources":["checkCppVersion.ts"],"names":["jsVersion","checkCppVersion","cppVersion","global","_REANIMATED_VERSION_CPP","undefined","Error","ok","matchVersion","version1","version2","match","major1","minor1","split","major2","minor2"],"mappings":";AAAA,SAASA,SAAT;AAEA,OAAO,SAASC,eAAT,GAA2B;EAChC,IAAMC,UAAU,GAAGC,MAAM,CAACC,uBAA1B;;EACA,IAAIF,UAAU,KAAKG,SAAnB,EAA8B;IAC5B,MAAM,IAAIC,KAAJ,CACH,8OADG,CAAN;EAGF;;EACA,IAAMC,EAAE,GAAGC,YAAY,CAACR,SAAD,EAAYE,UAAZ,CAAvB;;EACA,IAAI,CAACK,EAAL,EAAS;IACP,MAAM,IAAID,KAAJ,CACH,gFAA+EN,SAAU,QAAOE,UAAW,4HAA2HA,UAAW,kCAD9O,CAAN;EAGF;AACF;AAEA,OAAO,SAASM,YAAT,CAAsBC,QAAtB,EAAwCC,QAAxC,EAA0D;EAC/D,IAAID,QAAQ,CAACE,KAATF,CAAe,iBAAfA,KAAqCC,QAAQ,CAACC,KAATD,CAAe,iBAAfA,CAAzC,EAA4E;IAE1E,sBAAyBD,QAAQ,CAACK,KAATL,CAAe,GAAfA,CAAzB;IAAA;IAAA,IAAOG,MAAP;IAAA,IAAeC,MAAf;;IACA,sBAAyBH,QAAQ,CAACI,KAATJ,CAAe,GAAfA,CAAzB;IAAA;IAAA,IAAOK,MAAP;IAAA,IAAeC,MAAf;;IACA,OAAOJ,MAAM,KAAKG,MAAXH,IAAqBC,MAAM,KAAKG,MAAvC;EACD,CALD,MAKO;IAEL,OAAOP,QAAQ,KAAKC,QAApB;EACF;AACF","sourcesContent":["import { jsVersion } from './jsVersion';\n\nexport function checkCppVersion() {\n  const cppVersion = global._REANIMATED_VERSION_CPP;\n  if (cppVersion === undefined) {\n    throw new Error(\n      `[Reanimated] Couldn't determine the version of the native part of Reanimated. Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must use the exact version which is bundled into Expo SDK.`\n    );\n  }\n  const ok = matchVersion(jsVersion, cppVersion);\n  if (!ok) {\n    throw new Error(\n      `[Reanimated] Mismatch between JavaScript part and native part of Reanimated (${jsVersion} vs. ${cppVersion}). Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must downgrade to ${cppVersion} which is bundled into Expo SDK.`\n    );\n  }\n}\n\nexport function matchVersion(version1: string, version2: string) {\n  if (version1.match(/^\\d+\\.\\d+\\.\\d+$/) && version2.match(/^\\d+\\.\\d+\\.\\d+$/)) {\n    // x.y.z, compare only major and minor, skip patch\n    const [major1, minor1] = version1.split('.');\n    const [major2, minor2] = version2.split('.');\n    return major1 === major2 && minor1 === minor2;\n  } else {\n    // alpha, beta or rc, compare everything\n    return version1 === version2;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}